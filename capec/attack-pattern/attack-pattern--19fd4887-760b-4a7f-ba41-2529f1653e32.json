{
    "type": "bundle",
    "id": "bundle--a4a8a6a9-d1dc-4006-bfac-007286c8657b",
    "spec_version": "2.0",
    "objects": [
        {
            "type": "attack-pattern",
            "id": "attack-pattern--19fd4887-760b-4a7f-ba41-2529f1653e32",
            "created_by_ref": "identity--31f421d4-bb36-4dbf-9dfc-c116a91de14b",
            "created": "2014-06-23T00:00:00.000Z",
            "modified": "2017-08-04T00:00:00.000Z",
            "name": "Object Relational Mapping Injection",
            "description": "An attacker leverages a weakness present in the database access layer code generated with an Object Relational Mapping (ORM) tool or a weakness in the way that a developer used a persistence framework to inject his or her own SQL commands to be executed against the underlying database. The attack here is similar to plain SQL injection, except that the application does not use JDBC to directly talk to the database, but instead it uses a data access layer generated by an ORM tool or framework (e.g. Hibernate). While most of the time code generated by an ORM tool contains safe access methods that are immune to SQL injection, sometimes either due to some weakness in the generated code or due to the fact that the developer failed to use the generated access methods properly, SQL injection is still possible.",
            "external_references": [
                {
                    "source_name": "capec",
                    "url": "https://capec.mitre.org/data/definitions/109.html",
                    "external_id": "CAPEC-109"
                },
                {
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/20.html",
                    "external_id": "CWE-20"
                },
                {
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/100.html",
                    "external_id": "CWE-100"
                },
                {
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/89.html",
                    "external_id": "CWE-89"
                },
                {
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/564.html",
                    "external_id": "CWE-564"
                },
                {
                    "source_name": "reference_from_CAPEC",
                    "description": "OWASP Testing Guide (v4 [DRAFT]), The Open Web Application Security Project (OWASP)",
                    "url": "http://www.owasp.org/index.php/Testing_for_ORM_Injection",
                    "external_id": "REF-4"
                }
            ],
            "object_marking_refs": [
                "marking-definition--b345b2a9-b539-4d88-8a9a-1ebcc9f77507"
            ],
            "x_capec_abstraction": "Detailed",
            "x_capec_consequences": {
                "Integrity": [
                    "Modify Data",
                    "Execute Unauthorized Commands (Run Arbitrary Code)"
                ],
                "Availability": [
                    "Unreliable Execution",
                    "Execute Unauthorized Commands (Run Arbitrary Code)"
                ],
                "Authorization": [
                    "Gain Privileges"
                ],
                "Access_Control": [
                    "Gain Privileges"
                ],
                "Confidentiality": [
                    "Read Data",
                    "Gain Privileges",
                    "Execute Unauthorized Commands (Run Arbitrary Code)"
                ]
            },
            "x_capec_example_instances": [
                "When using Hibernate, it is possible to use the session.find() method to run queries against the database. This is an overloaded method that provides facilities to perform binding between the supplied user data and place holders in the statically defined query. However, it is also possible to use the session.find() method without using any of these query binding overloads, hence effectively concatenating the user supplied data with rest of the SQL query, resulting in a possibility for SQL injection. While the framework may provide mechanisms to use methods immune to SQL injections, it may also contain ways that are not immune that may be chosen by the developer."
            ],
            "x_capec_likelihood_of_attack": "Low",
            "x_capec_prerequisites": [
                "An application uses data access layer generated by an ORM tool or framework",
                "An application uses user supplied data in queries executed against the database",
                "The separation between data plane and control plane is not ensured, through either developer error or an underlying weakness in the data access layer code generation framework"
            ],
            "x_capec_resources_required": [
                "None: No specialized resources are required to execute this type of attack."
            ],
            "x_capec_skills_required": {
                "Medium": "Knowledge of general SQL injection techniques and subtleties of the ORM framework is needed"
            },
            "x_capec_status": "Draft",
            "x_capec_typical_severity": "High"
        }
    ]
}